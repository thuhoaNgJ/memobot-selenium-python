import pyperclip
import check_login
import setupDriver

from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time
import re
from selenium.common.exceptions import TimeoutException

def go_to_chatAI_page(driver, wait):
    search_input = "YouTube"
    check_login.search_audio(driver, wait, search_input)
    searched_audio_title = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.XPATH, "//div[@class='audio_title']"))
        )
    audio_title = searched_audio_title[0].text.strip() # click on the first audio in the search result
    searched_audio_title[0].click()  

    chat_btn = wait.until(EC.presence_of_element_located((By.XPATH, "//div[normalize-space()='Chat']")))
    chat_btn.click()
    time.sleep(5)  # wait for the chat page to load
    # üìù L·∫•y to√†n b·ªô n·ªôi dung vƒÉn b·∫£n t·ª´ trang
    page_text = driver.page_source

    # üîç Ki·ªÉm tra t√™n audio c√≥ t·ªìn t·∫°i kh√¥ng
    if audio_title in page_text:
        print("ƒê√£ m·ªü trang chat AI th√†nh c√¥ng v·ªõi audio: ", audio_title)
    else:
        print("‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c trang chat AI v·ªõi audio: ", audio_title)

def get_chatAT_token(driver, wait):
    # üí´ Regex t√¨m 2 con s·ªë ki·ªÉu '11k' v√† '500k'
    token_text = wait.until(EC.presence_of_element_located((By.XPATH, "//div[@data-placement='bottom']"))).text
    print("Gi√° tr·ªã hi·ªán t·∫°i:", token_text)
    match = re.search(r'Token:\s*(\d+(?:\.\d+)?k)\s*/\s*(\d+(?:\.\d+)?k)', token_text)
    if match:
        current_token_str = match.group(1)  # "11k"
        max_token_str = match.group(2)      # "500k"

        # üîÑ Chuy·ªÉn 'k' th√†nh s·ªë
        current_token = float(current_token_str.replace("k", "")) * 1000
        max_token = float(max_token_str.replace("k", "")) * 1000

        print(f"Token hi·ªán t·∫°i: {int(current_token)}")
        print(f"Gi·ªõi h·∫°n token: {int(max_token)}")
    else:
        print("Kh√¥ng t√¨m th·∫•y s·ªë token.")
    return int(current_token), int(max_token)

# div class ch·ª©a 'justify-content-start': c√¢u h·ªèi AI g·ª£i √Ω
# div class ch·ª©a 'justify-end': c√¢u h·ªèi ƒë√£ ƒë∆∞∆°c g·ª≠i
# div class ch·ª©a 'justify-start': c√¢u tr·∫£ l·ªùi do AI t·∫°o ra

def send_question(driver, wait):
    current_token, _ = get_chatAT_token(driver, wait)
    print("Gi√° tr·ªã token hi·ªán t·∫°i l√†:", current_token)  
    
    # T√¨m div cha ch·ª©a class 'justify-content-start' b·∫±ng wait
    parent_div = wait.until(
        EC.presence_of_element_located((By.XPATH, "//div[contains(@class, 'justify-content-start')]"))
    )

    # L·∫•y c√°c n√∫t <button> b√™n trong div ƒë√≥
    AIquestion_buttons = parent_div.find_elements(By.TAG_NAME, "button")

    # In ra text t·ª´ng button
    print("Danh s√°ch c√¢u h·ªèi AIgen:")
    for btn in AIquestion_buttons:
        print("-", btn.text.strip())
    
    #Ki·ªÉm tra ·∫•n v√†o 1 c√¢u h·ªèi AIgen
    if AIquestion_buttons:
        print("‚úÖ ƒê√£ t√¨m th·∫•y c√¢u h·ªèi AIgen.")
        AIquestion_buttons[0].click()  # ·∫•n v√†o c√¢u h·ªèi AIgen ƒë·∫ßu ti√™n
        time.sleep(10)  # ƒë·ª£i m·ªôt ch√∫t ƒë·ªÉ xem ph·∫£n h·ªìi

        # Ki·ªÉm tra xem c√≥ g·ª≠i ƒë√∫ng c√¢u h·ªèi ƒë·∫ßu ƒë√£ ch·ªçn ƒë∆∞·ª£c AI gen kh√¥ng?
        # L·∫•y text c·ªßa n√∫t button ƒë·∫ßu ti√™n (btn[0])
        first_question_text = AIquestion_buttons[0].text.strip()
        # L·∫•y n·ªôi dung c·ªßa c√¢u h·ªèi ƒë·∫ßu ti√™n ƒë√£ g·ª≠i 
        sent_questions = WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'justify-end')]/div"))
        )
        sent_questions_text = sent_questions[0].text.strip()
        # So s√°nh v√† in k·∫øt qu·∫£
        if sent_questions_text == first_question_text:
            print("ƒê√£ g·ª≠i c√¢u h·ªèi AI gen ƒë·∫ßu ti√™n.")
        else:
            print("C√¢u h·ªèi ch∆∞a kh·ªõp v·ªõi n√∫t ƒë·∫ßu ti√™n.")

        # Ki·ªÉm tra xem c√≥ nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI kh√¥ng?
        AI_response = WebDriverWait(driver, 10).until(
            EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'justify-start')]/div"))
        )
        AI_response_text = AI_response[0].text.strip()
        if AI_response_text:
            print("ƒê√£ nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI gen.")
            print("C√¢u tr·∫£ l·ªùi:", AI_response_text)
        else:
            print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI gen.")  

        # Ki·ªÉm tra xem token ƒë√£ s·ª≠ d·ª•ng c√≥ tƒÉng kh√¥ng
        new_current_token, _ = get_chatAT_token(driver, wait) 
        if new_current_token > current_token:
            print("‚úÖ Token s·ª≠ d·ª•ng ƒë√£ tƒÉng sau khi ·∫•n v√†o c√¢u h·ªèi AIgen.")
        else:
            print("‚ùå Token kh√¥ng tƒÉng sau khi ·∫•n v√†o c√¢u h·ªèi AIgen.")
 
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi AIgen.")

def check_input_question(driver, wait):
    current_token, _ = get_chatAT_token(driver, wait)
    print("Gi√° tr·ªã token hi·ªán t·∫°i l√†:", current_token)  
    # Nh·∫≠p v√† g·ª≠i c√¢u h·ªèi ƒë·∫øn AIgen
    input_box = wait.until(EC.presence_of_element_located((
        By.XPATH, "//textarea[@placeholder='B·∫Øt ƒë·∫ßu nh·∫≠p... (Enter ƒë·ªÉ submit, Shift-Enter ƒë·ªÉ xu·ªëng d√≤ng)']"
        )))
    input_box.send_keys("C√≥ c·∫ßn ki·ªÉm so√°t nh·ªØng n·ªôi dung ti√™u c·ª±c t·ª´ Youtube kh√¥ng?") 

    # T√¨m n√∫t g·ª≠i v√† click v√†o n√≥
    send_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[@type='submit']")))
    send_button.click()
    time.sleep(10)  # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ xem ph·∫£n h·ªìi

    # Ki·ªÉm tra xem c√≥ nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI kh√¥ng?
    AI_response = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'justify-start')]/div"))
    )
    AI_response_text = AI_response[0].text.strip()
    if AI_response_text:
        print("ƒê√£ nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI gen.")
        print("C√¢u tr·∫£ l·ªùi:", AI_response_text)
    else:
        print("‚ùå Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi t·ª´ AI gen.")  

    # Ki·ªÉm tra xem token ƒë√£ s·ª≠ d·ª•ng c√≥ tƒÉng kh√¥ng
    new_current_token, _ = get_chatAT_token(driver, wait) 
    if new_current_token > current_token:
        print("‚úÖ Token s·ª≠ d·ª•ng ƒë√£ tƒÉng sau khi ·∫•n v√†o c√¢u h·ªèi AIgen.")
    else:
        print("‚ùå Token kh√¥ng tƒÉng sau khi ·∫•n v√†o c√¢u h·ªèi AIgen.")

def get_answer_text(driver, wait):
    # T√¨m c√¢u tr·∫£ l·ªùi do AI t·∫°o ra
    AI_response = WebDriverWait(driver, 10).until(
        EC.presence_of_all_elements_located((By.XPATH, "//div[contains(@class, 'justify-start')]/div"))
    )
    if AI_response:
        AI_response_text = AI_response[0].text.strip()
        print("C√¢u tr·∫£ l·ªùi:", AI_response_text)
        return AI_response_text
    else:
        print("‚ùå Kh√¥ng t√¨m th·∫•y c√¢u tr·∫£ l·ªùi t·ª´ AI gen.")
        return None

def check_copy_answer(driver, wait):
    try:
        copy_button = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "//button[normalize-space()='Sao ch√©p']"))
        )
        print("N√∫t 'Sao ch√©p' ƒë√£ xu·∫•t hi·ªán.")
    except TimeoutException:    
        print("‚ùå N√∫t 'Sao ch√©p' ch∆∞a xu·∫•t hi·ªán do ch∆∞a c√≥ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi n√†o.")
        check_input_question(driver, wait)

    copy_button.click()
    print("‚úÖ ƒê√£ b·∫•m n√∫t 'Sao ch√©p'.")
    # Ki·ªÉm tra xem c√≥ th√¥ng b√°o sao ch√©p th√†nh c√¥ng kh√¥ng? 
    # so s√°nh text trong c√¢u tr·∫£ l·ªùi c√≥ ch·ª©a trong ƒëo·∫°n copy kh√¥ng?
    copied_answer_text = pyperclip.paste().split('[')[0].strip() 
    # d√πng split ƒë·ªÉ lo·∫°i b·ªè d·∫°ng [1]("?time_code=00:01:20" 
    print("ƒêo·∫°n text ƒë√£ sao ch√©p:", copied_answer_text)
    AI_response_text = get_answer_text(driver, wait) # ƒëo·∫°n text ƒë·∫ßu trong c√¢u tr·∫£ l·ªùi AI gen
    
    print("ƒêo·∫°n text trong c√¢u tr·∫£ l·ªùi AI gen:", AI_response_text)
    if AI_response_text:
        if copied_answer_text in AI_response_text in copied_answer_text:
            print("‚úÖ ƒê√£ sao ch√©p c√¢u tr·∫£ l·ªùi th√†nh c√¥ng.")
        else:
            print("‚ùå Kh√¥ng sao ch√©p ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi.")

def save_answer(driver, wait):
    try:
        element = WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(@class, 'justify-around')]"))
        )
        # ‚úÖ Cu·ªôn t·ªõi cu·ªëi
        driver.execute_script("arguments[0].scrollTop = arguments[0].scrollHeight", discussion_div)

        save_button = WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.XPATH, "/i[@class='fa fa-save']"))
        )
        print("N√∫t 'L∆∞u' ƒë√£ xu·∫•t hi·ªán.")
    except TimeoutException:    
        print("‚ùå N√∫t 'L∆∞u' ch∆∞a xu·∫•t hi·ªán do ch∆∞a c√≥ c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi n√†o.")
        check_input_question(driver, wait)

    save_button.click()
    print("‚úÖ ƒê√£ b·∫•m n√∫t 'L∆∞u'.")
    # Ki·ªÉm tra xem c√≥ th√¥ng b√°o l∆∞u th√†nh c√¥ng kh√¥ng?
    
    # ‚úÖ T√¨m th·∫ª <p> ƒë·∫ßu ti√™n b√™n trong div c√≥ id ch·ª©a 'noteModalbookmark'
    p_element = driver.find_element(By.XPATH, "//div[contains(@id, 'noteModalbookmark')]//p[1]")

    # ‚úÖ L·∫•y text
    first_paragraph = p_element.text
    print("üìù ƒêo·∫°n text ƒë·∫ßu ti√™n trong <p>:", first_paragraph)    
    clean_text = first_paragraph.split('[')[0].strip()
    print("üîç Text tr∆∞·ªõc d·∫•u [: ", clean_text)
              

if __name__ == "__main__":
    email= 'memo17@mailinator.com'
    password = 'Abcd@12345'

    # Kh·ªüi t·∫°o 2 tr√¨nh duy·ªát
    driver = setupDriver.setupWebdriver()
    wait = WebDriverWait(driver, 15)

    check_login.check_login(driver, wait, email, password)
    # go_to_chatAI_page(driver, wait)
    driver.get("https://app.memobot.io/memobot-v2/#!/memobot-audios/chat/681d68bca4e66dc8d4736dbf")
    time.sleep(10)  # wait for the chat page to load
    send_question(driver, wait)
    check_input_question(driver, wait)
    check_copy_answer(driver, wait)
    # save_answer(driver, wait)